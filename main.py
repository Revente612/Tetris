import logging
import sqlite3
import random
import os
from datetime import datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = "8400415519:AAETeEt-fAb9JQiXEwSihi1ZYMWaH6U1aUA"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('life_simulator.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS players (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            money INTEGER DEFAULT 0,
            health INTEGER DEFAULT 100,
            happiness INTEGER DEFAULT 100,
            education_level INTEGER DEFAULT 0,
            job_level INTEGER DEFAULT 0,
            has_apartment INTEGER DEFAULT 0,
            has_laptop INTEGER DEFAULT 0,
            has_vpn INTEGER DEFAULT 0,
            food INTEGER DEFAULT 100,
            cigarettes INTEGER DEFAULT 0,
            vape_type TEXT DEFAULT NULL,
            vape_juice INTEGER DEFAULT 0,
            juice_flavor TEXT DEFAULT NULL,
            snus_packs INTEGER DEFAULT 0,
            snus_strength INTEGER DEFAULT 0,
            has_girlfriend INTEGER DEFAULT 0,
            girlfriend_happiness INTEGER DEFAULT 0,
            age INTEGER DEFAULT 0,
            has_id INTEGER DEFAULT 0,
            last_work_time TEXT,
            last_school_time TEXT,
            last_crime_time TEXT,
            last_date_time TEXT,
            last_smoke_time TEXT,
            last_fraud_time TEXT,
            has_iqos INTEGER DEFAULT 0,
            iqos_sticks INTEGER DEFAULT 0,
            iqos_battery INTEGER DEFAULT 0,
            vape_battery INTEGER DEFAULT 0,
            created_at TEXT
        )
    ''')
    
    conn.commit()
    conn.close()

def upgrade_db():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –æ–Ω–∞ —É—Å—Ç–∞—Ä–µ–ª–∞"""
    conn = sqlite3.connect('life_simulator.db')
    cursor = conn.cursor()
    
    cursor.execute("PRAGMA table_info(players)")
    columns = [column[1] for column in cursor.fetchall()]
    
    new_columns = {
        'has_laptop': 'ALTER TABLE players ADD COLUMN has_laptop INTEGER DEFAULT 0',
        'has_vpn': 'ALTER TABLE players ADD COLUMN has_vpn INTEGER DEFAULT 0',
        'last_smoke_time': 'ALTER TABLE players ADD COLUMN last_smoke_time TEXT',
        'last_fraud_time': 'ALTER TABLE players ADD COLUMN last_fraud_time TEXT',
        'snus_packs': 'ALTER TABLE players ADD COLUMN snus_packs INTEGER DEFAULT 0',
        'snus_strength': 'ALTER TABLE players ADD COLUMN snus_strength INTEGER DEFAULT 0',
        'has_girlfriend': 'ALTER TABLE players ADD COLUMN has_girlfriend INTEGER DEFAULT 0',
        'girlfriend_happiness': 'ALTER TABLE players ADD COLUMN girlfriend_happiness INTEGER DEFAULT 0',
        'has_iqos': 'ALTER TABLE players ADD COLUMN has_iqos INTEGER DEFAULT 0',
        'iqos_sticks': 'ALTER TABLE players ADD COLUMN iqos_sticks INTEGER DEFAULT 0',
        'iqos_battery': 'ALTER TABLE players ADD COLUMN iqos_battery INTEGER DEFAULT 0',
        'vape_battery': 'ALTER TABLE players ADD COLUMN vape_battery INTEGER DEFAULT 0'
    }
    
    for column_name, alter_query in new_columns.items():
        if column_name not in columns:
            cursor.execute(alter_query)
    
    conn.commit()
    conn.close()
    print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")

def get_player(user_id):
    conn = sqlite3.connect('life_simulator.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM players WHERE user_id = ?', (user_id,))
    player = cursor.fetchone()
    conn.close()
    
    if player:
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–ª–∏–Ω—ã –∫–æ—Ä—Ç–µ–∂–∞
        player_dict = {
            'user_id': player[0],
            'username': player[1] if len(player) > 1 else None,
            'money': player[2] if len(player) > 2 else 0,
            'health': player[3] if len(player) > 3 else 100,
            'happiness': player[4] if len(player) > 4 else 100,
            'education_level': player[5] if len(player) > 5 else 0,
            'job_level': player[6] if len(player) > 6 else 0,
            'has_apartment': player[7] if len(player) > 7 else 0,
            'has_laptop': player[8] if len(player) > 8 else 0,
            'has_vpn': player[9] if len(player) > 9 else 0,
            'food': player[10] if len(player) > 10 else 100,
            'cigarettes': player[11] if len(player) > 11 else 0,
            'vape_type': player[12] if len(player) > 12 else None,
            'vape_juice': player[13] if len(player) > 13 else 0,
            'juice_flavor': player[14] if len(player) > 14 else None,
            'snus_packs': player[15] if len(player) > 15 else 0,
            'snus_strength': player[16] if len(player) > 16 else 0,
            'has_girlfriend': player[17] if len(player) > 17 else 0,
            'girlfriend_happiness': player[18] if len(player) > 18 else 0,
            'age': player[19] if len(player) > 19 else 16,
            'has_id': player[20] if len(player) > 20 else 0,
            'last_work_time': player[21] if len(player) > 21 else None,
            'last_school_time': player[22] if len(player) > 22 else None,
            'last_crime_time': player[23] if len(player) > 23 else None,
            'last_date_time': player[24] if len(player) > 24 else None,
            'last_smoke_time': player[25] if len(player) > 25 else None,
            'last_fraud_time': player[26] if len(player) > 26 else None,
            'has_iqos': player[27] if len(player) > 27 else 0,
            'iqos_sticks': player[28] if len(player) > 28 else 0,
            'iqos_battery': player[29] if len(player) > 29 else 0,
            'vape_battery': player[30] if len(player) > 30 else 0,
            'created_at': player[31] if len(player) > 31 else datetime.now().isoformat()
        }
        return player_dict
    return None

def create_player(user_id, username):
    conn = sqlite3.connect('life_simulator.db')
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO players (user_id, username, age, created_at) 
        VALUES (?, ?, ?, ?)
    ''', (user_id, username, 16, datetime.now().isoformat()))
    conn.commit()
    conn.close()

def update_player(user_id, **kwargs):
    conn = sqlite3.connect('life_simulator.db')
    cursor = conn.cursor()
    
    set_clause = ', '.join([f"{key} = ?" for key in kwargs.keys()])
    values = list(kwargs.values())
    values.append(user_id)
    
    cursor.execute(f'UPDATE players SET {set_clause} WHERE user_id = ?', values)
    conn.commit()
    conn.close()

def reset_player(user_id, username):
    conn = sqlite3.connect('life_simulator.db')
    cursor = conn.cursor()
    cursor.execute('''
        UPDATE players SET 
            money = 0,
            health = 100,
            happiness = 50,
            education_level = 0,
            job_level = 0,
            has_apartment = 0,
            has_laptop = 0,
            has_vpn = 0,
            food = 100,
            cigarettes = 0,
            vape_type = NULL,
            vape_juice = 0,
            juice_flavor = NULL,
            snus_packs = 0,
            snus_strength = 0,
            has_girlfriend = 0,
            girlfriend_happiness = 0,
            has_id = 0,
            last_work_time = NULL,
            last_school_time = NULL,
            last_crime_time = NULL,
            last_date_time = NULL,
            last_smoke_time = NULL,
            last_fraud_time = NULL,
            has_iqos = 0,
            iqos_sticks = 0,
            iqos_battery = 0,
            vape_battery = 0
        WHERE user_id = ?
    ''', (user_id,))
    conn.commit()
    conn.close()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    
    player = get_player(user_id)
    if not player:
        create_player(user_id, user.username)
        player = get_player(user_id)
    
    keyboard = [
        ["üè† –°—Ç–∞—Ç—É—Å", "üíº –†–∞–±–æ—Ç–∞"],
        ["üõí –ú–∞–≥–∞–∑–∏–Ω", "üî´ –ö—Ä–∏–º–∏–Ω–∞–ª"],
        ["üè´ –®–∫–æ–ª–∞", "üö¨ –ö—É—Ä–∏—Ç—å/–í–µ–π–ø–∏—Ç—å/–°–Ω—é—Å"],
        ["üè° –ö—É–ø–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É", "üíï –î–µ–≤—É—à–∫–∞"],
        ["üéÇ –û—Ç–º–µ—Ç–∏—Ç—å –î–†", "üìã –ü–æ–ª—É—á–∏—Ç—å –ø–∞—Å–ø–æ—Ä—Ç"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    welcome_text = f"""
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –°–∏–º—É–ª—è—Ç–æ—Ä –ñ–∏–∑–Ω–∏, {user.first_name}!

üéØ –í–∞—à–∏ —Ü–µ–ª–∏:
‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –¥–µ–Ω—å–≥–∏ üí∞ (—Ä–∞–±–æ—Ç–∞ –∏–ª–∏ –∫—Ä–∏–º–∏–Ω–∞–ª)
‚Ä¢ –ö—É–ø–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É üè°
‚Ä¢ –ù–∞–π—Ç–∏ –¥–µ–≤—É—à–∫—É üíï
‚Ä¢ –ù–µ —É–º–µ—Ä–µ—Ç—å –æ—Ç –≥–æ–ª–æ–¥–∞ üçñ

üìù –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
- –†–∞–±–æ—Ç–∞—Ç—å –º–æ–∂–Ω–æ —Å –ª—é–±–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞
- –ú–æ–∂–Ω–æ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –∫—Ä–∏–º–∏–Ω–∞–ª–æ–º –∏ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ–º
- –í —à–∫–æ–ª–µ –º–æ–∂–Ω–æ –∫—É—Ä–∏—Ç—å –≤ —Ç—É–∞–ª–µ—Ç–µ (–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ!)
- –î–µ–≤—É—à–∫–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–∞—Å—Ç—å–µ
- –ú–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –Ω–æ—É—Ç–±—É–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã

‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –∫—É—Ä–µ–Ω–∏–µ, –≤–µ–π–ø–∏–Ω–≥ –∏ —Å–Ω—é—Å –≤ —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏ –≤—Ä–µ–¥—è—Ç –∑–¥–æ—Ä–æ–≤—å—é!
–≠—Ç–æ –≤—Å–µ–≥–æ –ª–∏—à—å –∏–≥—Ä–∞.

–ù–∞–∂–º–∏—Ç–µ "üè† –°—Ç–∞—Ç—É—Å" —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ!
    """
    
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)

async def show_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    player = get_player(user_id)
    
    if not player:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
        return
    
    food_decrease = random.randint(5, 15)
    new_food = max(0, player['food'] - food_decrease)
    
    if new_food <= 0:
        health_decrease = 10
        new_health = max(0, player['health'] - health_decrease)
        update_player(user_id, food=new_food, health=new_health)
    else:
        update_player(user_id, food=new_food)
    
    player = get_player(user_id)

    vape_info = ""
    if player['vape_type']:
        battery_status = "üîã" if player['vape_battery'] > 0 else "ü™´"
        vape_info = f"\nüîã –í–µ–π–ø: {player['vape_type']} ({battery_status} {player['vape_battery']}%)"
    if player['vape_juice'] > 0 and player['juice_flavor']:
        vape_info += f"\nüíß –ñ–∏–∂–∞: {player['juice_flavor']} ({player['vape_juice']}–º–ª)"
    
    iqos_info = ""
    if player['has_iqos']:
        battery_status = "üîã" if player['iqos_battery'] > 0 else "ü™´"
        iqos_info = f"\nüî• –ê–π–∫–æ—Å: {battery_status} {player['iqos_battery']}%"
        if player['iqos_sticks'] > 0:
            iqos_info += f"\nüì¶ –°—Ç–∏–∫–∏: {player['iqos_sticks']} —à—Ç. (–º—è—Ç–Ω—ã–µ)"
    
    snus_info = ""
    if player['snus_packs'] > 0:
        snus_info = f"\nüì¶ –°–Ω—é—Å: {player['snus_packs']} –ø–∞—á–µ–∫ ({player['snus_strength']} –º–≥)"
    
    girlfriend_info = ""
    if player['has_girlfriend']:
        girlfriend_info = f"\nüíï –î–µ–≤—É—à–∫–∞: —Å—á–∞—Å—Ç—å–µ {player['girlfriend_happiness']}/100"
    
    tech_info = ""
    if player['has_laptop']:
        tech_info += "\nüíª –ù–æ—É—Ç–±—É–∫: ‚úÖ –ï—Å—Ç—å"
    if player['has_vpn']:
        tech_info += "\nüõ°Ô∏è VPN: ‚úÖ –ï—Å—Ç—å"
    
    status_text = f"""
üìä –í–ê–® –°–¢–ê–¢–£–°:

üéÇ –í–æ–∑—Ä–∞—Å—Ç: {player['age']} –ª–µ—Ç
üìã –ü–∞—Å–ø–æ—Ä—Ç: {'‚úÖ –ï—Å—Ç—å' if player['has_id'] else '‚ùå –ù–µ—Ç (–Ω—É–∂–Ω–æ 18 –ª–µ—Ç)'}

üíµ –î–µ–Ω—å–≥–∏: {player['money']} —Ä—É–±.
‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: {player['health']}/100
üòä –°—á–∞—Å—Ç—å–µ: {player['happiness']}/100
üçñ –ï–¥–∞: {player['food']}/100

üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {get_education_level_name(player['education_level'])}
üíº –†–∞–±–æ—Ç–∞: {get_job_level_name(player['job_level'])}
üè° –ö–≤–∞—Ä—Ç–∏—Ä–∞: {'‚úÖ –ï—Å—Ç—å' if player['has_apartment'] else '‚ùå –ù–µ—Ç'}
{tech_info}

üö¨ –°–∏–≥–∞—Ä–µ—Ç—ã: {player['cigarettes']} —à—Ç.
{vape_info}
{iqos_info}
{snus_info}
{girlfriend_info}

{'‚ö†Ô∏è –í–ê–ñ–ù–û: –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –µ–¥–∞! –ó–¥–æ—Ä–æ–≤—å–µ —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è!' if player['food'] <= 0 else ''}
{'üíÄ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –°–û–°–¢–û–Ø–ù–ò–ï! –°—Ä–æ—á–Ω–æ –ø–æ–µ—à—å—Ç–µ!' if player['health'] <= 20 else ''}
    """
    
    await update.message.reply_text(status_text)

def get_education_level_name(level):
    levels = {
        0: "9 –∫–ª–∞—Å—Å–æ–≤",
        1: "11 –∫–ª–∞—Å—Å–æ–≤", 
        2: "–ö–æ–ª–ª–µ–¥–∂",
        3: "–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç",
        4: "–ê—Å–ø–∏—Ä–∞–Ω—Ç—É—Ä–∞"
    }
    return levels.get(level, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

def get_job_level_name(level):
    jobs = {
        0: "–ë–µ–∑—Ä–∞–±–æ—Ç–Ω—ã–π",
        1: "–†–∞–∑–Ω–æ—Ä–∞–±–æ—á–∏–π (50 —Ä—É–±.)",
        2: "–ü—Ä–æ–¥–∞–≤–µ—Ü (100 —Ä—É–±.)",
        3: "–û—Ñ–∏—Å–Ω—ã–π —Ä–∞–±–æ—Ç–Ω–∏–∫ (200 —Ä—É–±.)", 
        4: "–î–∞–ª—å–Ω–æ–±–æ–π—â–∏–∫ (800 —Ä—É–±.)",
        5: "–ú–µ–Ω–µ–¥–∂–µ—Ä (500 —Ä—É–±.)",
        6: "–î–∏—Ä–µ–∫—Ç–æ—Ä (1000 —Ä—É–±.)",
        7: "–ú–æ—à–µ–Ω–Ω–∏–∫ (600 —Ä—É–±.)",
        8: "–†–∞–±–æ—Ç–Ω–∏–∫ –ü–í–ó (3250 —Ä—É–±.)"  # –ù–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞
    }
    return jobs.get(level, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

async def work(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    player = get_player(user_id)
    
    if not player:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
        return
    
    if player['job_level'] == 0:
        await update.message.reply_text("""
üíº –í–∞–º –Ω—É–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞!
–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ —Ä–∞–±–æ—Ç—É –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–∞–≥–∞–∑–∏–Ω" -> "–£—Å—Ç—Ä–æ–∏—Ç—å—Å—è –Ω–∞ —Ä–∞–±–æ—Ç—É"
        """)
        return
    
    if player['job_level'] == 7 and not player['has_laptop']:
        await update.message.reply_text("""
‚ùå –î–ª—è —Ä–∞–±–æ—Ç—ã –º–æ—à–µ–Ω–Ω–∏–∫–æ–º –Ω—É–∂–µ–Ω –Ω–æ—É—Ç–±—É–∫!
–ö—É–ø–∏—Ç–µ –Ω–æ—É—Ç–±—É–∫ –≤ –º–∞–≥–∞–∑–∏–Ω–µ.
        """)
        return
    
    last_work = datetime.fromisoformat(player['last_work_time']) if player['last_work_time'] else None
    work_cooldown = timedelta(minutes=1)
    
    if last_work and (datetime.now() - last_work) < work_cooldown:
        time_left = work_cooldown - (datetime.now() - last_work)
        await update.message.reply_text(f"‚è∞ –í—ã —É—Å—Ç–∞–ª–∏! –û—Ç–¥–æ—Ö–Ω–∏—Ç–µ {int(time_left.total_seconds() / 60)} –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π —Ä–∞–±–æ—Ç–æ–π.")
        return
    
    earnings = [0, 50, 100, 200, 800, 500, 1000, 600, 3250][player['job_level']]  # –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞ –ü–í–ó
    new_money = player['money'] + earnings
    
    update_player(
        user_id, 
        money=new_money, 
        last_work_time=datetime.now().isoformat(),
        happiness=max(0, player['happiness'] - 5)
    )
    
    job_names = {
        7: "üïµÔ∏è‚Äç‚ôÇÔ∏è –ü—Ä–æ–≤–µ–ª–∏ –∞—Ñ–µ—Ä—É",
        8: "üì¶ –ü–æ—Ä–∞–±–æ—Ç–∞–ª–∏ –≤ –ü–í–ó",  # –ù–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞
    }
    
    job_name = job_names.get(player['job_level'], "üíº –ü–æ—Ä–∞–±–æ—Ç–∞–ª–∏")
    
    await update.message.reply_text(f"""
{job_name} –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {earnings} —Ä—É–±.!
üí∞ –¢–µ–ø–µ—Ä—å —É –≤–∞—Å: {new_money} —Ä—É–±.

üòî –°—á–∞—Å—Ç—å–µ –Ω–µ–º–Ω–æ–≥–æ —É–º–µ–Ω—å—à–∏–ª–æ—Å—å...
    """)

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–æ –º–∞–≥–∞–∑–∏–Ω–∞) ...

async def shop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üçñ –ï–¥–∞ (50 —Ä—É–±.)", callback_data="buy_food")],
        [InlineKeyboardButton("üö¨ –°–∏–≥–∞—Ä–µ—Ç—ã (30 —Ä—É–±.)", callback_data="buy_cigarettes")],
        [InlineKeyboardButton("üîû –ü–æ–ø—Ä–æ—Å–∏—Ç—å –≤–∑—Ä–æ—Å–ª—ã—Ö –∫—É–ø–∏—Ç—å —Å–∏–≥–∞—Ä–µ—Ç—ã (100 —Ä—É–±.)", callback_data="buy_cigarettes_adult")],
        [InlineKeyboardButton("üí® –í–µ–π–ø—ã –∏ –∂–∏–∂–∏", callback_data="vape_shop")],
        [InlineKeyboardButton("üî• –ê–π–∫–æ—Å –∏ —Å—Ç–∏–∫–∏", callback_data="iqos_shop")],
        [InlineKeyboardButton("‚ö° –ó–∞—Ä—è–¥–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (120 —Ä—É–±.)", callback_data="charge_devices")],
        [InlineKeyboardButton("üì¶ –°–Ω—é—Å 500 –º–≥ (150 —Ä—É–±.)", callback_data="buy_snus")],
        [InlineKeyboardButton("‚ù§Ô∏è –õ–µ—á–µ–Ω–∏–µ (100 —Ä—É–±.)", callback_data="buy_health")],
        [InlineKeyboardButton("üòä –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è (80 —Ä—É–±.)", callback_data="buy_happiness")],
        [InlineKeyboardButton("üíº –£—Å—Ç—Ä–æ–∏—Ç—å—Å—è –Ω–∞ —Ä–∞–±–æ—Ç—É (200 —Ä—É–±.)", callback_data="buy_job")],
        [InlineKeyboardButton("üíª –ù–æ—É—Ç–±—É–∫ (5000 —Ä—É–±.)", callback_data="buy_laptop")],
        [InlineKeyboardButton("üõ°Ô∏è VPN (200 —Ä—É–±.)", callback_data="buy_vpn")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text("""
üõí –ú–ê–ì–ê–ó–ò–ù:

üçñ –ï–¥–∞ (50 —Ä—É–±.) - +50 –∫ –µ–¥–µ
üö¨ –°–∏–≥–∞—Ä–µ—Ç—ã (30 —Ä—É–±.) - –ø–∞—á–∫–∞ —Å–∏–≥–∞—Ä–µ—Ç (—Ç–æ–ª—å–∫–æ —Å 18 –ª–µ—Ç)
üîû –ü–æ–ø—Ä–æ—Å–∏—Ç—å –≤–∑—Ä–æ—Å–ª—ã—Ö (100 —Ä—É–±.) - –¥–æ—Ä–æ–∂–µ, –Ω–æ –±–µ–∑ –ø–∞—Å–ø–æ—Ä—Ç–∞
üí® –í–µ–π–ø—ã –∏ –∂–∏–∂–∏ - —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ —Å–∏–≥–∞—Ä–µ—Ç—ã –∏ –∂–∏–¥–∫–æ—Å—Ç–∏
üî• –ê–π–∫–æ—Å –∏ —Å—Ç–∏–∫–∏ - —Å–∏—Å—Ç–µ–º—ã –Ω–∞–≥—Ä–µ–≤–∞–Ω–∏—è —Ç–∞–±–∞–∫–∞
‚ö° –ó–∞—Ä—è–¥–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (120 —Ä—É–±.) - –∑–∞—Ä—è–¥–∏—Ç—å –≤–µ–π–ø/–∞–π–∫–æ—Å
üì¶ –°–Ω—é—Å 500 –º–≥ (150 —Ä—É–±.) - –∫—Ä–µ–ø–∫–∏–π —Å–Ω—é—Å
‚ù§Ô∏è –õ–µ—á–µ–Ω–∏–µ (100 —Ä—É–±.) - +30 –∫ –∑–¥–æ—Ä–æ–≤—å—é
üòä –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è (80 —Ä—É–±.) - +40 –∫ —Å—á–∞—Å—Ç—å—é
üíº –£—Å—Ç—Ä–æ–∏—Ç—å—Å—è –Ω–∞ —Ä–∞–±–æ—Ç—É (200 —Ä—É–±.) - –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–±–æ—Ç—É
üíª –ù–æ—É—Ç–±—É–∫ (5000 —Ä—É–±.) - –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∏ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞
üõ°Ô∏è VPN (200 —Ä—É–±.) - –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å –¥–ª—è –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞

–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å:
    """, reply_markup=reply_markup)

async def vape_shop_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("üîã –í–µ–π–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", callback_data="vape_devices")],
        [InlineKeyboardButton("üíß –ñ–∏–¥–∫–æ—Å—Ç–∏ –¥–ª—è –≤–µ–π–ø–∞", callback_data="vape_juices")],
        [InlineKeyboardButton("üîû –ü–æ–ø—Ä–æ—Å–∏—Ç—å –≤–∑—Ä–æ—Å–ª—ã—Ö –∫—É–ø–∏—Ç—å –≤–µ–π–ø (300 —Ä—É–±.)", callback_data="buy_vape_adult")],
        [InlineKeyboardButton("üîû –ü–æ–ø—Ä–æ—Å–∏—Ç—å –≤–∑—Ä–æ—Å–ª—ã—Ö –∫—É–ø–∏—Ç—å –∂–∏–∂—É (250 —Ä—É–±.)", callback_data="buy_juice_adult")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_shop")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text("""
üí® –ú–ê–ì–ê–ó–ò–ù –í–ï–ô–ü–û–í –ò –ñ–ò–î–ö–û–°–¢–ï–ô:

üîã –í–µ–π–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ - –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ –∏ –º–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–µ
üíß –ñ–∏–¥–∫–æ—Å—Ç–∏ - —Ä–∞–∑–Ω—ã–µ –≤–∫—É—Å—ã
üîû –ü–æ–ø—Ä–æ—Å–∏—Ç—å –≤–∑—Ä–æ—Å–ª—ã—Ö –∫—É–ø–∏—Ç—å –≤–µ–π–ø - –∫—É–ø–∏—Ç—å –±–µ–∑ –ø–∞—Å–ø–æ—Ä—Ç–∞
üîû –ü–æ–ø—Ä–æ—Å–∏—Ç—å –≤–∑—Ä–æ—Å–ª—ã—Ö –∫—É–ø–∏—Ç—å –∂–∏–∂—É - –∫—É–ø–∏—Ç—å –±–µ–∑ –ø–∞—Å–ø–æ—Ä—Ç–∞

‚ö†Ô∏è –î–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–µ–π–ø–æ–≤ –Ω—É–∂–Ω–æ –±—ã—Ç—å 18+ –∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –≤–∑—Ä–æ—Å–ª—ã—Ö
    """, reply_markup=reply_markup)

async def iqos_shop_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("üî• –ê–π–∫–æ—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (800 —Ä—É–±.)", callback_data="buy_iqos")],
        [InlineKeyboardButton("üì¶ –ú—è—Ç–Ω—ã–µ —Å—Ç–∏–∫–∏ (150 —Ä—É–±.)", callback_data="buy_iqos_sticks")],
        [InlineKeyboardButton("üîû –ü–æ–ø—Ä–æ—Å–∏—Ç—å –≤–∑—Ä–æ—Å–ª—ã—Ö –∫—É–ø–∏—Ç—å –∞–π–∫–æ—Å (1000 —Ä—É–±.)", callback_data="buy_iqos_adult")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_shop")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text("""
üî• –ú–ê–ì–ê–ó–ò–ù –ê–ô–ö–û–°:

üî• –ê–π–∫–æ—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ - 800 —Ä—É–±. (—Å–∏—Å—Ç–µ–º–∞ –Ω–∞–≥—Ä–µ–≤–∞–Ω–∏—è —Ç–∞–±–∞–∫–∞)
üì¶ –ú—è—Ç–Ω—ã–µ —Å—Ç–∏–∫–∏ - 150 —Ä—É–±. (–ø–∞—á–∫–∞ —Å—Ç–∏–∫–æ–≤)
üîû –ü–æ–ø—Ä–æ—Å–∏—Ç—å –≤–∑—Ä–æ—Å–ª—ã—Ö –∫—É–ø–∏—Ç—å –∞–π–∫–æ—Å - 1000 —Ä—É–±. (–±–µ–∑ –ø–∞—Å–ø–æ—Ä—Ç–∞)

‚ö†Ô∏è –î–ª—è –ø–æ–∫—É–ø–∫–∏ –∞–π–∫–æ—Å –Ω—É–∂–Ω–æ –±—ã—Ç—å 18+ –∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –≤–∑—Ä–æ—Å–ª—ã—Ö
    """, reply_markup=reply_markup)

async def vape_devices_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("Pasito 2 (400 —Ä—É–±.)", callback_data="buy_pasito2")],
        [InlineKeyboardButton("Xros (350 —Ä—É–±.)", callback_data="buy_xros")],
        [InlineKeyboardButton("Boost 2 (450 —Ä—É–±.)", callback_data="buy_boost2")],
        [InlineKeyboardButton("Minican (300 —Ä—É–±.)", callback_data="buy_minican")],
        [InlineKeyboardButton("Knight (380 —Ä—É–±.)", callback_data="buy_knight")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="vape_shop")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text("""
üîã –í–ï–ô–ü –£–°–¢–†–û–ô–°–¢–í–ê:

Pasito 2 - 400 —Ä—É–±. (–º–æ—â–Ω—ã–π, –º–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–π)
Xros - 350 —Ä—É–±. (–∫–æ–º–ø–∞–∫—Ç–Ω—ã–π)
Boost 2 - 450 —Ä—É–±. (–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π)
Minican - 300 —Ä—É–±. (–æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π)
Knight - 380 —Ä—É–±. (—Å—Ç–∏–ª—å–Ω—ã–π)

–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:
    """, reply_markup=reply_markup)

async def vape_juices_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("üçâ –ê—Ä–±—É–∑ –∏ –º—è—Ç–∞ (200 —Ä—É–±.)", callback_data="buy_juice_watermelon")],
        [InlineKeyboardButton("üåø –õ–µ—Å–Ω—ã–µ —è–≥–æ–¥—ã –∏ –º—è—Ç–∞ (220 —Ä—É–±.)", callback_data="buy_juice_berries")],
        [InlineKeyboardButton("üçå –ê–Ω–∞—Ä—Ö–∏—è: –ë–∞–Ω–∞–Ω-–ú–∞–ª–∏–Ω–∞ 70–º–≥ (300 —Ä—É–±.)", callback_data="buy_juice_anarchy")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="vape_shop")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text("""
üíß –ñ–ò–î–ö–û–°–¢–ò –î–õ–Ø –í–ï–ô–ü–ê:

üçâ –ê—Ä–±—É–∑ –∏ –º—è—Ç–∞ - 200 —Ä—É–±. (30–º–ª)
üåø –õ–µ—Å–Ω—ã–µ —è–≥–æ–¥—ã –∏ –º—è—Ç–∞ - 220 —Ä—É–±. (30–º–ª)
üçå –ê–Ω–∞—Ä—Ö–∏—è: –ë–∞–Ω–∞–Ω-–ú–∞–ª–∏–Ω–∞ 70–º–≥ - 300 —Ä—É–±. (30–º–ª) - –û–ß–ï–ù–¨ –ö–†–ï–ü–ö–ê–Ø!

–ñ–∏–¥–∫–æ—Å—Ç–∏ –¥–æ–±–∞–≤–ª—è—é—Ç 30–º–ª –∫ –≤–∞—à–µ–º—É –≤–µ–π–ø—É
    """, reply_markup=reply_markup)

async def handle_shop_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    player = get_player(user_id)
    
    if not player:
        await query.edit_message_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
        return
    
    if query.data == "vape_shop":
        await vape_shop_menu(update, context)
        return
    elif query.data == "iqos_shop":
        await iqos_shop_menu(update, context)
        return
    elif query.data == "vape_devices":
        await vape_devices_menu(update, context)
        return
    elif query.data == "vape_juices":
        await vape_juices_menu(update, context)
        return
    elif query.data == "back_to_shop":
        await shop_callback(update, context)
        return
    
    item_data = {
        "buy_food": {"price": 50, "type": "food"},
        "buy_cigarettes": {"price": 30, "type": "cigarettes"},
        "buy_cigarettes_adult": {"price": 100, "type": "cigarettes_adult"},
        "buy_health": {"price": 100, "type": "health"},
        "buy_happiness": {"price": 80, "type": "happiness"},
        "buy_job": {"price": 200, "type": "job"},
        "buy_snus": {"price": 150, "type": "snus"},
        "buy_laptop": {"price": 5000, "type": "laptop"},
        "buy_vpn": {"price": 200, "type": "vpn"},
        "buy_pasito2": {"price": 400, "type": "vape_device", "name": "Pasito 2", "battery": 100},
        "buy_xros": {"price": 350, "type": "vape_device", "name": "Xros", "battery": 100},
        "buy_boost2": {"price": 450, "type": "vape_device", "name": "Boost 2", "battery": 100},
        "buy_minican": {"price": 300, "type": "vape_device", "name": "Minican", "battery": 100},
        "buy_knight": {"price": 380, "type": "vape_device", "name": "Knight", "battery": 100},
        "buy_juice_watermelon": {"price": 200, "type": "vape_juice", "flavor": "–ê—Ä–±—É–∑ –∏ –º—è—Ç–∞"},
        "buy_juice_berries": {"price": 220, "type": "vape_juice", "flavor": "–õ–µ—Å–Ω—ã–µ —è–≥–æ–¥—ã –∏ –º—è—Ç–∞"},
        "buy_juice_anarchy": {"price": 300, "type": "vape_juice", "flavor": "–ê–Ω–∞—Ä—Ö–∏—è: –ë–∞–Ω–∞–Ω-–ú–∞–ª–∏–Ω–∞ 70–º–≥"},
        "buy_vape_adult": {"price": 300, "type": "vape_adult"},
        "buy_juice_adult": {"price": 250, "type": "juice_adult"},
        "buy_iqos": {"price": 800, "type": "iqos_device", "battery": 100},
        "buy_iqos_sticks": {"price": 150, "type": "iqos_sticks"},
        "buy_iqos_adult": {"price": 1000, "type": "iqos_adult"},
        "charge_devices": {"price": 120, "type": "charge"}
    }
    
    item_info = item_data.get(query.data)
    if not item_info:
        return
    
    price = item_info["price"]
    item_type = item_info["type"]
    
    if item_type in ["cigarettes", "vape_device", "vape_juice", "iqos_device", "iqos_sticks"] and (player['age'] < 18 or not player['has_id']):
        await query.edit_message_text("‚ùå –î–ª—è –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω—É–∂–Ω–æ –±—ã—Ç—å 18+ –∏ –∏–º–µ—Ç—å –ø–∞—Å–ø–æ—Ä—Ç!")
        return
    
    if player['money'] < price:
        await query.edit_message_text(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥! –ù—É–∂–Ω–æ {price} —Ä—É–±., –∞ —É –≤–∞—Å {player['money']} —Ä—É–±.")
        return
    
    new_money = player['money'] - price
    message = f"‚úÖ –ü–æ–∫—É–ø–∫–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {price} —Ä—É–±.\nüí∞ –û—Å—Ç–∞–ª–æ—Å—å: {new_money} —Ä—É–±.\n"
    
    if item_type == "food":
        update_player(user_id, money=new_money, food=min(100, player['food'] + 50))
        message += "üçñ +50 –∫ –µ–¥–µ"
    elif item_type == "cigarettes":
        update_player(user_id, money=new_money, cigarettes=player['cigarettes'] + 20)
        message += "üö¨ +20 —Å–∏–≥–∞—Ä–µ—Ç"
    elif item_type == "cigarettes_adult":
        update_player(user_id, money=new_money, cigarettes=player['cigarettes'] + 20)
        message += "üö¨ +20 —Å–∏–≥–∞—Ä–µ—Ç (—á–µ—Ä–µ–∑ –≤–∑—Ä–æ—Å–ª—ã—Ö)"
    elif item_type == "health":
        update_player(user_id, money=new_money, health=min(100, player['health'] + 30))
        message += "‚ù§Ô∏è +30 –∫ –∑–¥–æ—Ä–æ–≤—å—é"
    elif item_type == "happiness":
        update_player(user_id, money=new_money, happiness=min(100, player['happiness'] + 40))
        message += "üòä +40 –∫ —Å—á–∞—Å—Ç—å—é"
    elif item_type == "job":
        if player['job_level'] < 8:  # –¢–µ–ø–µ—Ä—å –º–∞–∫—Å–∏–º—É–º 8 —É—Ä–æ–≤–Ω–µ–π —Ä–∞–±–æ—Ç—ã
            new_job_level = player['job_level'] + 1
            update_player(user_id, money=new_money, job_level=new_job_level)
            message += f"üíº –¢–µ–ø–µ—Ä—å –≤—ã: {get_job_level_name(new_job_level)}"
        else:
            message += "üíº –£ –≤–∞—Å —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Ä–∞–±–æ—Ç—ã!"
    elif item_type == "snus":
        update_player(user_id, money=new_money, snus_packs=player['snus_packs'] + 1, snus_strength=500)
        message += "üì¶ +1 –ø–∞—á–∫–∞ —Å–Ω—é—Å–∞ 500 –º–≥"
    elif item_type == "laptop":
        update_player(user_id, money=new_money, has_laptop=1)
        message += "üíª –í—ã –∫—É–ø–∏–ª–∏ –Ω–æ—É—Ç–±—É–∫! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å —É–¥–∞–ª–µ–Ω–Ω–æ –∏ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ–º"
    elif item_type == "vpn":
        update_player(user_id, money=new_money, has_vpn=1)
        message += "üõ°Ô∏è –í—ã –∫—É–ø–∏–ª–∏ VPN! –¢–µ–ø–µ—Ä—å –≤—ã –±–æ–ª–µ–µ –∞–Ω–æ–Ω–∏–º–Ω—ã –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ"
    elif item_type == "vape_device":
        update_player(user_id, money=new_money, vape_type=item_info["name"], vape_battery=item_info["battery"])
        message += f"üîã –ü—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω –≤–µ–π–ø: {item_info['name']} (–±–∞—Ç–∞—Ä–µ—è: {item_info['battery']}%)"
    elif item_type == "vape_juice":
        update_player(user_id, money=new_money, vape_juice=player['vape_juice'] + 30, juice_flavor=item_info["flavor"])
        message += f"üíß +30–º–ª –∂–∏–¥–∫–æ—Å—Ç–∏: {item_info['flavor']}"
    elif item_type == "vape_adult":
        vapes = ["Pasito 2", "Xros", "Boost 2", "Minican", "Knight"]
        random_vape = random.choice(vapes)
        update_player(user_id, money=new_money, vape_type=random_vape, vape_battery=100)
        message += f"üîã –í–∑—Ä–æ—Å–ª—ã–µ –∫—É–ø–∏–ª–∏ –≤–∞–º –≤–µ–π–ø: {random_vape} (–±–∞—Ç–∞—Ä–µ—è: 100%)"
    elif item_type == "juice_adult":
        juices = ["–ê—Ä–±—É–∑ –∏ –º—è—Ç–∞", "–õ–µ—Å–Ω—ã–µ —è–≥–æ–¥—ã –∏ –º—è—Ç–∞", "–ê–Ω–∞—Ä—Ö–∏—è: –ë–∞–Ω–∞–Ω-–ú–∞–ª–∏–Ω–∞ 70–º–≥"]
        random_juice = random.choice(juices)
        update_player(user_id, money=new_money, vape_juice=player['vape_juice'] + 30, juice_flavor=random_juice)
        message += f"üíß –í–∑—Ä–æ—Å–ª—ã–µ –∫—É–ø–∏–ª–∏ –≤–∞–º –∂–∏–¥–∫–æ—Å—Ç—å: {random_juice} (30–º–ª)"
    elif item_type == "iqos_device":
        update_player(user_id, money=new_money, has_iqos=1, iqos_battery=item_info["battery"])
        message += f"üî• –ü—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω –ê–π–∫–æ—Å! (–±–∞—Ç–∞—Ä–µ—è: {item_info['battery']}%)"
    elif item_type == "iqos_sticks":
        update_player(user_id, money=new_money, iqos_sticks=player['iqos_sticks'] + 10)
        message += "üì¶ +10 –º—è—Ç–Ω—ã—Ö —Å—Ç–∏–∫–æ–≤ –¥–ª—è –ê–π–∫–æ—Å"
    elif item_type == "iqos_adult":
        update_player(user_id, money=new_money, has_iqos=1, iqos_battery=100)
        message += "üî• –í–∑—Ä–æ—Å–ª—ã–µ –∫—É–ø–∏–ª–∏ –≤–∞–º –ê–π–∫–æ—Å! (–±–∞—Ç–∞—Ä–µ—è: 100%)"
    elif item_type == "charge":
        # –ó–∞—Ä—è–∂–∞–µ–º –æ–±–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        charge_message = ""
        if player['vape_type'] and player['vape_battery'] < 100:
            update_player(user_id, vape_battery=100)
            charge_message += "üîã –í–µ–π–ø –∑–∞—Ä—è–∂–µ–Ω –¥–æ 100%\n"
        if player['has_iqos'] and player['iqos_battery'] < 100:
            update_player(user_id, iqos_battery=100)
            charge_message += "üî• –ê–π–∫–æ—Å –∑–∞—Ä—è–∂–µ–Ω –¥–æ 100%\n"
        
        if charge_message:
            update_player(user_id, money=new_money)
            message += f"‚ö° –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∑–∞—Ä—è–∂–µ–Ω—ã!\n{charge_message}"
        else:
            message = "‚ùå –ù–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è –∑–∞—Ä—è–¥–∫–∏ –∏–ª–∏ –æ–Ω–∏ —É–∂–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞—Ä—è–∂–µ–Ω—ã!"
            new_money = player['money']  # –ù–µ —Å–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏
    
    await query.edit_message_text(message)

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–π–∫–æ—Å
async def smoke_vape_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    player = get_player(user_id)
    
    if not player:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
        return
    
    keyboard = [
        ["üö¨ –í—ã–∫—É—Ä–∏—Ç—å —Å–∏–≥–∞—Ä–µ—Ç—É", "üí® –ü–æ–∫—É—Ä–∏—Ç—å –≤–µ–π–ø"],
        ["üî• –ü–æ–∫—É—Ä–∏—Ç—å –∞–π–∫–æ—Å", "üì¶ –ó–∞–∫–∏–Ω—É—Ç—å —Å–Ω—é—Å"],
        ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text("""
üö¨ –í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:

üö¨ –°–∏–≥–∞—Ä–µ—Ç–∞ - –±–æ–ª—å—à–µ –≤—Ä–µ–¥–∞, –Ω–æ –¥–µ—à–µ–≤–ª–µ
üí® –í–µ–π–ø - –º–µ–Ω—å—à–µ –≤—Ä–µ–¥–∞, –Ω–æ –Ω—É–∂–µ–Ω –≤–µ–π–ø –∏ –∂–∏–¥–∫–æ—Å—Ç—å
üî• –ê–π–∫–æ—Å - —Å–∏—Å—Ç–µ–º–∞ –Ω–∞–≥—Ä–µ–≤–∞–Ω–∏—è —Ç–∞–±–∞–∫–∞, –º–µ–Ω—å—à–µ –≤—Ä–µ–¥–∞ —á–µ–º —Å–∏–≥–∞—Ä–µ—Ç—ã
üì¶ –°–Ω—é—Å - –æ—á–µ–Ω—å –∫—Ä–µ–ø–∫–∏–π, –±–æ–ª—å—à–æ–π –≤—Ä–µ–¥ –∑–¥–æ—Ä–æ–≤—å—é

‚ö†Ô∏è –ü–æ–º–Ω–∏—Ç–µ: –≤ —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏ –∏ —Ç–æ –∏ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–¥–Ω–æ –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è!
    """, reply_markup=reply_markup)

async def use_iqos(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    player = get_player(user_id)
    
    if not player['has_iqos']:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ê–π–∫–æ—Å! –ö—É–ø–∏—Ç–µ –≤ –º–∞–≥–∞–∑–∏–Ω–µ.")
        return
    
    if player['iqos_battery'] <= 0:
        await update.message.reply_text("ü™´ –ê–π–∫–æ—Å —Ä–∞–∑—Ä—è–∂–µ–Ω! –ó–∞—Ä—è–¥–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ –º–∞–≥–∞–∑–∏–Ω–µ.")
        return
    
    if player['iqos_sticks'] <= 0:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å—Ç–∏–∫–æ–≤ –¥–ª—è –ê–π–∫–æ—Å! –ö—É–ø–∏—Ç–µ –≤ –º–∞–≥–∞–∑–∏–Ω–µ.")
        return
    
    new_sticks = player['iqos_sticks'] - 1
    new_battery = max(0, player['iqos_battery'] - 15)
    new_health = max(0, player['health'] - 10)
    new_happiness = min(100, player['happiness'] + 20)
    
    update_player(
        user_id,
        iqos_sticks=new_sticks,
        iqos_battery=new_battery,
        health=new_health,
        happiness=new_happiness
    )
    
    battery_warning = "ü™´ –ê–π–∫–æ—Å –ø–æ—á—Ç–∏ —Ä–∞–∑—Ä—è–∂–µ–Ω! –ó–∞—Ä—è–¥–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ." if new_battery <= 20 else ""
    health_warning = "üíÄ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –°–û–°–¢–û–Ø–ù–ò–ï! –°—Ä–æ—á–Ω–æ –ª–µ—á–∏—Ç–µ—Å—å!" if new_health <= 20 else ""
    
    await update.message.reply_text(f"""
üî• –í—ã –ø–æ–∫—É—Ä–∏–ª–∏ –ê–π–∫–æ—Å (–º—è—Ç–Ω—ã–µ —Å—Ç–∏–∫–∏)...

‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: -10 (—Ç–µ–ø–µ—Ä—å {new_health})
üòä –°—á–∞—Å—Ç—å–µ: +20 (—Ç–µ–ø–µ—Ä—å {new_happiness})
üì¶ –°—Ç–∏–∫–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å: {new_sticks}
üîã –ë–∞—Ç–∞—Ä–µ—è –ê–π–∫–æ—Å: {new_battery}%

{battery_warning}
{health_warning}
‚ö†Ô∏è –ö—É—Ä–µ–Ω–∏–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏ –≤—Ä–µ–¥–∏—Ç –∑–¥–æ—Ä–æ–≤—å—é!
    """)

# –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    if text == "üè† –°—Ç–∞—Ç—É—Å":
        await show_status(update, context)
    elif text == "üíº –†–∞–±–æ—Ç–∞":
        await work(update, context)
    elif text == "üî´ –ö—Ä–∏–º–∏–Ω–∞–ª":
        await crime_menu(update, context)
    elif text in ["üí∞ –£–∫—Ä–∞—Å—Ç—å –∫–æ—à–µ–ª–µ–∫", "üè™ –û–≥—Ä–∞–±–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω", "üè† –û–≥—Ä–∞–±–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É", "üöó –£–≥–Ω–∞—Ç—å –º–∞—à–∏–Ω—É", "üïµÔ∏è‚Äç‚ôÇÔ∏è –ú–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ"]:
        await commit_crime(update, context)
    elif text == "üõí –ú–∞–≥–∞–∑–∏–Ω":
        await shop(update, context)
    elif text == "üè´ –®–∫–æ–ª–∞":
        await school_menu(update, context)
    elif text == "üìö –£—á–∏—Ç—å—Å—è":
        await study(update, context)
    elif text == "üö¨ –°—Ö–æ–¥–∏—Ç—å –≤ —Ç—É–∞–ª–µ—Ç –ø–æ–∫—É—Ä–∏—Ç—å":
        await school_smoke(update, context)
    elif text == "üè° –ö—É–ø–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É":
        await buy_apartment(update, context)
    elif text == "üö¨ –ö—É—Ä–∏—Ç—å/–í–µ–π–ø–∏—Ç—å/–°–Ω—é—Å":
        await smoke_vape_menu(update, context)
    elif text == "üö¨ –í—ã–∫—É—Ä–∏—Ç—å —Å–∏–≥–∞—Ä–µ—Ç—É":
        await smoke_cigarette(update, context)
    elif text == "üí® –ü–æ–∫—É—Ä–∏—Ç—å –≤–µ–π–ø":
        await vape(update, context)
    elif text == "üî• –ü–æ–∫—É—Ä–∏—Ç—å –∞–π–∫–æ—Å":
        await use_iqos(update, context)
    elif text == "üì¶ –ó–∞–∫–∏–Ω—É—Ç—å —Å–Ω—é—Å":
        await use_snus(update, context)
    elif text == "üéÇ –û—Ç–º–µ—Ç–∏—Ç—å –î–†":
        await celebrate_birthday(update, context)
    elif text == "üìã –ü–æ–ª—É—á–∏—Ç—å –ø–∞—Å–ø–æ—Ä—Ç":
        await get_passport(update, context)
    elif text == "üíï –î–µ–≤—É—à–∫–∞":
        await girlfriend_menu(update, context)
    elif text == "üíï –ù–∞–π—Ç–∏ –¥–µ–≤—É—à–∫—É":
        await find_girlfriend(update, context)
    elif text == "üíë –°–≤–∏–¥–∞–Ω–∏–µ":
        await date_girlfriend(update, context)
    elif text == "üéÅ –ü–æ–¥–∞—Ä–æ–∫ –¥–µ–≤—É—à–∫–µ":
        await gift_girlfriend(update, context)
    elif text == "üíî –†–∞—Å—Å—Ç–∞—Ç—å—Å—è":
        await break_up(update, context)
    elif text in ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "‚¨ÖÔ∏è –í—ã–π—Ç–∏ –∏–∑ —Ç—É–∞–ª–µ—Ç–∞"]:
        await start(update, context)
    else:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–π!")

# –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é vape –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞—Ç–∞—Ä–µ–∏
async def vape(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    player = get_player(user_id)
    
    if not player['vape_type']:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –≤–µ–π–ø–∞! –ö—É–ø–∏—Ç–µ –≤ –º–∞–≥–∞–∑–∏–Ω–µ.")
        return
    
    if player['vape_battery'] <= 0:
        await update.message.reply_text("ü™´ –í–µ–π–ø —Ä–∞–∑—Ä—è–∂–µ–Ω! –ó–∞—Ä—è–¥–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ –º–∞–≥–∞–∑–∏–Ω–µ.")
        return
    
    if player['vape_juice'] <= 0:
        await update.message.reply_text("‚ùå –í –≤–µ–π–ø–µ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –∂–∏–¥–∫–æ—Å—Ç—å! –ö—É–ø–∏—Ç–µ –∂–∏–¥–∫–æ—Å—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω–µ.")
        return
    
    new_juice = max(0, player['vape_juice'] - 5)
    new_battery = max(0, player['vape_battery'] - 10)
    new_health = max(0, player['health'] - 8)
    new_happiness = min(100, player['happiness'] + 25)
    
    update_player(
        user_id,
        vape_juice=new_juice,
        vape_battery=new_battery,
        health=new_health,
        happiness=new_happiness
    )
    
    battery_warning = "ü™´ –í–µ–π–ø –ø–æ—á—Ç–∏ —Ä–∞–∑—Ä—è–∂–µ–Ω! –ó–∞—Ä—è–¥–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ." if new_battery <= 20 else ""
    health_warning = "üíÄ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –°–û–°–¢–û–Ø–ù–ò–ï! –°—Ä–æ—á–Ω–æ –ª–µ—á–∏—Ç–µ—Å—å!" if new_health <= 20 else ""
    
    await update.message.reply_text(f"""
üí® –í—ã –ø–æ–∫—É—Ä–∏–ª–∏ –≤–µ–π–ø ({player['vape_type']})...

‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: -8 (—Ç–µ–ø–µ—Ä—å {new_health})
üòä –°—á–∞—Å—Ç—å–µ: +25 (—Ç–µ–ø–µ—Ä—å {new_happiness})
üíß –ñ–∏–¥–∫–æ—Å—Ç–∏ –æ—Å—Ç–∞–ª–æ—Å—å: {new_juice}–º–ª
üîã –ë–∞—Ç–∞—Ä–µ—è –≤–µ–π–ø–∞: {new_battery}%
üéØ –í–∫—É—Å: {player['juice_flavor']}

{battery_warning}
{health_warning}
‚ö†Ô∏è –í–µ–π–ø–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏ —Ç–æ–∂–µ –≤—Ä–µ–¥–µ–Ω –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è!
    """)

def main():
    init_db()
    upgrade_db()
    
    application = Application.builder().token(BOT_TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(handle_shop_callback, pattern="^buy_"))
    application.add_handler(CallbackQueryHandler(handle_shop_callback, pattern="^vape_"))
    application.add_handler(CallbackQueryHandler(handle_shop_callback, pattern="^iqos_"))
    application.add_handler(CallbackQueryHandler(handle_shop_callback, pattern="^charge_"))
    application.add_handler(CallbackQueryHandler(handle_shop_callback, pattern="^back_to_shop"))
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == "__main__":
    main()
